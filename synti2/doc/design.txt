Some implementation notes.

Final decisions and their rationale
-----------------------------------

I don't find many valid reasons (at least for myself) to take up such
a silly and time consuming spare-time project as programming a tiny
software synthesizer. The most defining and basic reason in this case
was that I wanted to learn some new things, and to prove to myself
with a finalized artefact that I have gained a substantial amount of
knowledge on the initially chosen topics. Most of the final
technology-limiting decisions arise quite directly from this
fundamental goal setting.

- The core synthesis part of Synti2 is implemented in pure, portable
  ANSI C. For this project, one of the learning goals was the details
  of creating a portable ANSI C program. While the project is still
  going on in its final stages, I am already developing an
  overwhelming urge to learn some contemporary x86_64 assembler
  programming, and the hunger is growing to make the synth smaller,
  leaner, and faster by applying floating point machine instructions
  directly in assembly language. But I must soon get to the end of
  this project, and leave assembly implementation, among other new
  interests, for some future endeavour. Any inner loop in assembly
  would immediately break the portability of synti2, and couple it
  with a specific processor model. The actual portability, of course,
  remains to be proven by trying out different compilers and
  platforms. I'm sure there is a bunch of new stuff to learn during
  that process, too. As to versions of C, I believe it will be my next
  goal to learn what new things C99 offers and use them to the full
  extent in a later project. But I'll take up one standard at a time.

- Synti2 does not have a "proper" reverberation effect. It was one of
  my goals to learn how digital reverb effect algorithms work, and
  maybe even include one in synti2. There was as much learning as I
  needed on this part, but I'll take the implementation part over to
  some later project, simply to cut down the calendar time required to
  finish with this one.

- Synti2 is a "fully-featured" synthesizer, even if it costs in
  executable file size. A main goal was to create a musically usable
  software synthesizer "plug-in" - just to know how such things are
  made in principle. This clearly conflicts with the other, equally
  important target, which was to make the synthesis engine very
  tiny. The compromising balance between these two goals must remain
  equal till the end (even as the hunger for smaller and smaller
  implementation grows). The whole thing wouldn't exist if it wasn't
  equally (and highly) interesting to try both of the two things, not
  only one or the other.

- No more hacks or quirks (as of April, 2012). There are already some
  things that I don't like, one of which is the tight coupling of the
  sequence player and the synthesis engine. Let there be no more of
  those, even at the cost of code size. I think I'll make some changes
  to the overall architecture, but I hope I can stay clear of "ugly"
  decisions. The program must be relatively cute even in the end.



Lessons learned
---------------

I'll gather some TODO-notes as "lessons learned", or things to be
tried in some future project, if I happen to continue with similar
synth projects (The TODO here is to go over the loads of abandoned
code and scrap papers to find more of these)::

 * TODO: (In some later, re-designed project) the envelope code could
 * be made simpler by letting go of the whole loop idea, and, instead,
 * using some kind of LFOs or inter-channel patching for modulation
 * effects.
 *
 * TODO: (In some other later project) the envelopes could be made
 * more interesting by combining more parts than just 5 linear
 * interpolation knees. Consider a freely editable list of arbitrary
 * combinations of constant+anyWaveTable at editable frequencies. I
 * think that such code could (somehow, maybe) support both compact
 * storage for 4k and, at the same time, unlimited flexibility for
 * sound design, when size limitations need not to be considered.

 * TODO: Velocity is not connected nicely to the amp envelopes. There
   is a pop when velocity changes, because it affects the output
   volume instead of the envelope target value, which it should!
   Remember to deal with this in future projects!

 * TODO: (Before future projects with re-designed synths) Evaluate if
 * this everything-is-a-counter thing was a good idea.


/* TODO: Think about the whole envelope madness... use LFOs instead of
 * looping envelopes?
 */
