# Patch design.
#
# Lines beginning with '#' and empty lines are ignored by tools.
#
# Captions in brackets '[thus]' begin a section of different data
# type/precision.
#
# The C code for patch format is generated from this file.
#

# FIXME: It would be perfect if the whole patch design could be partly
# compiled when some "NO_DONT_USE_SOME_FEATURE" is present. That would
# reduce sound data size greatly, I believe! But then there would be a
# problem with tool programs that are using indices at the
# moment. Maybe yet another job for the midi filter module... Map from
# original indices to restricted ones in compose mode? In playback
# mode the code contains only macro names. Yep. Do this somehow!!
#
# ... but then.. yet another new idea emerges, which conflicts with 
# the previous one.

##############  Patch data 

# Format, one line per parameter: NAME Description MIN MAX GUIPrecision GUIGroup

[I3]
# 3-bit integer parameters:
# These end up as SYNTI2_I3_NAME

# Index of the envelope whose end is end-of-life for the sound.
# For "normal" patches this presumably is the carrier volume envelope..
# Will I ever use this one? Problematic with delay channels..
ELIFE LifeEnvelope 0 6 0 1

# FIXME: A small C-like example of what I want here:
# (but what about during compose-time?)
#ifndef NO_EXTRA_WAVETABLES
HARM1 Op1Wav 0 7   0 5
HARM2 Op2Wav 0 7   0 5
HARM3 Op3Wav 0 7   0 5
HARM4 Op4Wav 0 7   0 5
#endif


# Indices of the operator amplitude envelopes
EAMP1 Op1AmpEnv 0 6   0 0
EAMP2 Op2AmpEnv 0 6   0 0
EAMP3 Op3AmpEnv 0 6   0 0
EAMP4 Op4AmpEnv 0 6   0 0
EAMPN NoiseAmpEnv 0 6   0 4

# Indices of the pitch envelopes
EPIT1 Op1PitchEnv 0 6   0 1
EPIT2 Op2PitchEnv 0 6   0 1
EPIT3 Op3PitchEnv 0 6   0 1
EPIT4 Op4PitchEnv 0 6   0 1

# FIXME: Pan and filter envelopes! (And a final filter design...)

# Ampl. Velocity sensitivity (0=no effect 1=fully sensitive) 
# Think about using some look-up tables to their full
# capacity here... 0=no 1=linear 2=squared 3=inverse ...
# (In a later project)
# FIXME: There should be an assignable velocity target and range?
# And hey, with a quite similar logic, a pitch sensitivity could be built?

VS1 Oper1VelSens 0 1   2 14
VS2 Oper2VelSens 0 1   2 14
VS3 Oper3VelSens 0 1   2 14
VS4 Oper4VelSens 0 1   2 14
VSN NoiseVelSens 0 1   2 14
VSC FiltCutVelSens 0 1   2 14


# Number of envelope knees to jump backwards from last knee
# if looping envelope logic is compiled in.
# DANGER: all-zero times inside loop lead to infinite iteration!!!
ELOOP1 En1LoopLen 0 3   0 2
ELOOP2 En2LoopLen 0 3   0 2
ELOOP3 En3LoopLen 0 3   0 2
ELOOP4 En4LoopLen 0 3   0 2
ELOOP5 En5LoopLen 0 3   0 2
ELOOP6 En6LoopLen 0 3   0 2

# Total of 16 seem to be critically useful.. no.. there is more!!

FMTO1 FModTo1 0 0   0 3
FMTO2 FModTo2 0 1   0 3
FMTO3 FModTo3 0 2   0 3
FMTO4 FModTo4 0 3   0 3

ADDTO1 MixTo1 0 0   0 4
ADDTO2 MixTo2 0 1   0 4
ADDTO3 MixTo3 0 2   0 4
ADDTO4 MixTo4 0 3   0 4

# How many delay/connection lines are turned on for input
# summation and how many for output spread. Maximum 4.
NDIN DlyLinesIn  0 4 0 5
NDOUT DlyLinesOut 0 4 0 5

# Filter LP,BP,HP,Notch
FILT FilterMode 0 3 0 16

# Use a delay line instead of zero as "input 0":
FBACK FeedBack 0 4 0 17

# Need an even number of 3-bit parameters:
#xxx UNUSED0 0 1 0 18


[F]
# "Floating point" parameters:

# This is a 'hack' for null controller target.
# (Not used for sound generation.)
NULLTGT NOT_Editable 0 0 0 1

# After ENVS, envelope params need to be ordered and consistent with the code!
ENVS    En1:1T 0 0.255   3 6
ENV1K1L En1:1L 0 1.27   2 6
ENV1K2T En1:2T  0 1.27   2 6
ENV1K2L En1:2L 0 1.27   2 6
ENV1K3T En1:3T  0 1.27   2 6
ENV1K3L En1:3L 0 1.27   2 6
ENV1K4T En1:4T  0 1.27   2 6
ENV1K4L En1:4L 0 1.27   2 6
ENV1K5T En1:5T  0 1.27   2 6
ENV1K5L En1:5L 0 1.27   2 6

ENV2K1T En2:1T  0 0.255   3 7
ENV2K1L En2:1L 0 5.00   2 7
ENV2K2T En2:2T  0 1.27   2 7
ENV2K2L En2:2L 0 5.00   2 7
ENV2K3T En2:3T  0 2.55   2 7
ENV2K3L En2:3L 0 5.00   2 7
ENV2K4T En2:4T  0 2.55   2 7
ENV2K4L En2:4L 0 5.00   2 7
ENV2K5T En2:5T  0 2.55   2 7
ENV2K5L En2:5L 0 5.00   2 7

ENV3K1T En3:1T 0 0.255   3 8
ENV3K1L En3:1L 0 12.0   1 8
ENV3K2T En3:2T 0 1.27   2 8
ENV3K2L En3:2L 0 12.0   1 8
ENV3K3T En3:3T 0 2.55   2 8
ENV3K3L En3:3L 0 12.0   1 8
ENV3K4T En3:4T 0 2.55   2 8
ENV3K4L En3:4L 0 12.0   1 8
ENV3K5T En3:5T 0 2.55   2 8
ENV3K5L En3:5L 0 12.0   1 8

ENV4K1T En4:1T  0 0.255   3 9
ENV4K1L En4:1L -1.27 1.27   2 9
ENV4K2T En4:2T  0 1.27   2 9
ENV4K2L En4:2L -1.27 1.27   2 9
ENV4K3T En4:3T  0 2.56   2 9
ENV4K3L En4:3L -1.27 1.27   2 9
ENV4K4T En4:4T  0 5.11   2 9
ENV4K4L En4:4L -1.27 1.27   2 9
ENV4K5T En4:5T  0 2.56   2 9
ENV4K5L En4:5L -1.27 1.27   2 9

ENV5K1T En5:1T  0  1.27   2 10
ENV5K1L En5:1L -63 +64   0 10
ENV5K2T En5:2T  0  1.27   2 10
ENV5K2L En5:2L -63 +64   0 10
ENV5K3T En5:3T  0  1.27   2 10
ENV5K3L En5:3L -63 +64   0 10
ENV5K4T En5:4T  0  1.27   2 10
ENV5K4L En5:4L -63 +64   0 10
ENV5K5T En5:5T  0  1.27   2 10
ENV5K5L En5:5L -63 +64   0 10

ENV6K1T En6:1T  0 1.27   2  11
ENV6K1L En6:1L -31.0 32.0   1 11
ENV6K2T En6:2T  0 1.27   2 11
ENV6K2L En6:2L -31.0 32.0   1 11
ENV6K3T En6:3T  0 1.27   2 11
ENV6K3L En6:3L -31.0 32.0   1 11
ENV6K4T En6:4T  0 1.27   2 11
ENV6K4L En6:4L -31.0 32.0   1 11
ENV6K5T En6:5T  0 1.27   2 11
ENV6K5L En6:5L -31.0 32.0   1 11

# Source Levels (before multiplicative amplitude envelope)
# This is for additional "gain" or phase inversion.

LV1 Oper1Lev -8.0 8.0   2 15
LV2 Oper2Lev -8.0 8.0   2 15
LV3 Oper3Lev -8.0 8.0   2 15
LV4 Oper4Lev -8.0 8.0   2 15
LVN NoiseLev -8.0 8.0   2 15

# Detune/Relative fundamental pitch (added to "note from keyboard")
# NOTE: Order of these is hardcoded as of 2012-03-04:

DT1  Op1Crs  -48.0 48.0   1 12
DT2  Op2Crs  -48.0 48.0   1 12
DT3  Op3Crs  -48.0 48.0   1 12
DT4  Op4Crs  -48.0 48.0   1 12
DT1F Op1Fine     -.5  .5     3 13
DT2F Op2Fine     -.5  .5     3 13
DT3F Op3Fine     -.5  .5     3 13
DT4F Op4Fine     -.5  .5     3 13

# Notes to bend at positive maximum:
PBAM   Op1BendAmt 0.0 24.0 1 18
PBAM2  Op2BendAmt 0.0 24.0 1 18
PBAM3  Op3BendAmt 0.0 24.0 1 18
PBAM4  Op4BendAmt 0.0 24.0 1 18
# Bend value, not for editing but for pitch bend messages.
# Bend is used by patching controller #4 to this value.
PBVAL NOT_Editable -1.0  1.0  2 18



# Delay lines in/out; maximum 4 global lines:

DINLV1 Dly1InLev  -1.0 1.0   2 16
DINLV2 Dly2InLev  -1.0 1.0   2 16
DINLV3 Dly3InLev  -1.0 1.0   2 16
DINLV4 Dly4InLev  -1.0 1.0   2 16

# Filter parameters; the very basic ones
FFREQ Cutoff  0.0 80.0   2 17
FRESO Resonance   0.0 1.0   2 17

# Delay lengths in seconds
DLEN1 Dly1Length  0.0 1.0   3 17
DLEN2 Dly2Length  0.0 1.0   3 17
DLEN3 Dly3Length  0.0 1.0   3 17
DLEN4 Dly4Length  0.0 1.0   3 17


# Delay output levels
DLEV1 Dly1OutLev  0.0 1.0   2 18
DLEV2 Dly2OutLev  0.0 1.0   2 18
DLEV3 Dly3OutLev  0.0 1.0   2 18
DLEV4 Dly4OutLev  0.0 1.0   2 18


# Global output mix level for convenience
MIXLEV MixLev 0.0 1.0  2 19

# Global pan for some stereophonic aural excitation
MIXPAN MixPan  -1.0 1.0  2 19


# Controller destinations (indices of fpars)
# Hmm.. Should these be auxiliary as well?
# No.. it is OK to have these per patch.
CDST1 Cont1Dest 0.0 127 0 20
CDST2 Cont2Dest 0.0 127 0 20
CDST3 Cont3Dest 0.0 127 0 20
CDST4 Cont4Dest 0.0 127 0 20

# Controller mins and maxes .. NO.... 
#
# FIXME: These should be auxiliary (in the same place with channel
# allocation)
#
# CMIN1 Cont1Min -2.0 +2.0   2 21
# CMIN2 Cont2Min -4.0 +4.0   1 21
# CMIN3 Cont3Min -8.0 +8.0   1 21
# CMIN4 Cont4Min -16.0 +16.0 1 21
#
# CMAX1 Cont1Max -2.0 +2.0   2 22
# CMAX2 Cont2Max -4.0 +4.0   1 22
# CMAX3 Cont3Max -8.0 +8.0   1 22
# CMAX4 Cont4Max -16.0 +16.0 1 22



# Other patch data.. Hmm.. playground as of now:

# Pitch note follow ratio (TODO: Useful?) Not using this
# so-far.. could be nice for tom sounds, spezial effects, or for
# including noise as yet another wavetable.  Hmm. What about... "Skip
# freq" I3 parameter per oscillator. Then noise could be a wavetable
# and the frequency would be set at 1/sr. FIXME: think about this,
# maybe

#PF1 Oper1NoteFollow 0 1   2 15
#PF2 Oper2NoteFollow 0 1   2 15
#PF3 Oper3NoteFollow 0 1   2 15
#PF4 Oper4NoteFollow 0 1   2 15


# TODO: Padding to get a power-of-two length for the instrument patch?
# hmmm.. why power of two? Well, just in case some bit-shifting..
# Padding should be done by the tool programs... so far no
# need... could be final like this...
