/** Synti-kaksi interface */
#ifndef SYNTI2_INCLUDED
#define SYNTI2_INCLUDED

typedef float synti2_smp_t;

typedef struct synti2_synth synti2_synth;
typedef struct synti2_player synti2_player;

/* ------- Realtime / pre-sequenced synth interface ------- */

/** Create a synth instance */
synti2_synth *
synti2_create(unsigned long sr, 
              const unsigned char * patch_sysex, 
              const unsigned char * songdata);

/** Render some (stereo-interleaved) frames of audio to the output
 *  buffer.
 */
void
synti2_render(synti2_synth *s, 
	      synti2_smp_t *buffer,
	      int nframes);


/* ------- Realtime control interface ------- */

/* So far only jack MIDI is supported. It would be easy to support
 * others (at least as of yet, when the synth listens to plain
 * MIDI:)).
 */

#ifdef JACK_MIDI
#include <jack/jack.h>
#include <jack/midiport.h>
/** Creates a future for the player object that will repeat the next
 *  nframes of midi data from a jack audio connection kit midi port.
 */
void
synti2_read_jack_midi(synti2_synth *s,
                      jack_port_t *inmidi_port,
                      jack_nframes_t nframes);
#endif



/* Defines for indices and stuff. Should be autogenerated from some
 * nicer description!! Writing these manually is plain madness.
 */
/*TODO: Design the patch format properly. */
#define SYNTI2_IENVS 0
#define SYNTI2_IENVLOOP 40
#define SYNTI2_IELIFE 44
#define SYNTI2_IEAMP1 45
#define SYNTI2_IEAMP2 46
#define SYNTI2_IEAMP3 47
#define SYNTI2_IEAMP4 48
#define SYNTI2_IEAMPN 49
#define SYNTI2_IEPIT1 50
#define SYNTI2_IEPIT2 51
#define SYNTI2_IEPIT3 52
#define SYNTI2_IEPIT4 53

#define SYNTI2_NPARAMS 128


/* Length of envelope data block (K1T&L K2T&L K3T&L K4T&L K5T&L) */
/* (order of knees might be different??) FIXME: Think about this .. make envs simpler?*/
#define SYNTI2_NENVD 10

#endif
