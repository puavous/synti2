/** Synth capacities and configuration. */
#include "captool.hpp"
#include "keyvalhelper.hpp"
#include "featuretool.hpp"
#include <iostream>
#include <sstream>

using std::endl;

const std::string cap_prologue =
  "#ifndef SYNTI2_CAPACITIES_INCLUDED\n"
  "#define SYNTI2_CAPACITIES_INCLUDED\n";
const std::string cap_epilogue = 
  "#endif\n";
const std::string cap_documentation = 
  "/** @file synti2_cap.h \n"
  " * \n"
  " * OBSERVE: This file is generated by the command line \n"
  " * configurator tool! Editing by hand is not recommended,\n"
  " * and neither should it be necessary. See cltool.cxx for\n"
  " * more details. Some documentation is given below, though.\n"
  " * \n"
  " * This file defines the 'capacities', or limits, of a specific \n"
  " * build of the Synti2 software synthesizer. The idea is that\n"
  " * more restricted custom values can be used in compiling the \n"
  " * final 4k target than those that are used while composing the \n"
  " * music and designing patches. The final 4k executable should\n"
  " * have only the minimum features that its musical score requires.\n"
  " *\n */\n\n"
  " /* Variables defined here (FIXME: refactor names!!) are:\n"
  "  * NPARTS - multitimbrality; number of max simultaneous sounds;\n"
  "  *          also the number of patches in the patch bank\n"
  "  * NENVPERVOICE - envelopes per voice\n"
  "  * NOSCILLATORS - oscillators/operators per voice\n"
  "  * NCONTROLLERS - oscillators/operators per voice\n"
  "  * NENVKNEES    - number of 'knees' in the envelope\n"
  "  * NDELAYS      - number of delay lines\n"
  "  * DELAYSAMPLES - maximum length of each delay line in samples\n"
  "  * SYNTI2_MAX_SONGBYTES  - maximum size of song sequence data\n"
  "  * SYNTI2_MAX_SONGEVENTS - maximum number of sequence events\n"
  "  */\n\n";

const std::string cap_defaults =
  "num_voices 16  \n"
  "num_envs 6\n"
  "num_ops 4\n"
  "num_mods 4\n"
  "num_knees 5\n"
  "num_delays 8\n"
  "features all\n";

synti2::Capacities::Capacities(std::istream &ist) {
  std::stringstream ss(cap_defaults);
  kval.readFromStream(ss);
}

void
synti2::Capacities::write(std::ostream &ost) const{
  ost << kval;
}

void
synti2::Capacities::writeCapH(std::ostream &ost) const {
  ost << cap_prologue;
  ost << cap_documentation;
  ost << "#define NPARTS " << kval.asInt("num_voices") << endl;
  ost << "#define NENVPERVOICE " << kval.asInt("num_envs") << endl;

  ost << "#define NOSCILLATORS " << kval.asInt("num_ops") << endl;
  ost << "#define NCONTROLLERS " << kval.asInt("num_mods") << endl;
  ost << "#define NENVKNEES " << kval.asInt("num_knees") << endl;
  ost << "#define NDELAYS " << kval.asInt("num_delays") << endl;

  /* Derived values.. */
  ost << "#define TRIGGERSTAGE "  << "(NENVKNEES)" << endl;
  ost << "#define SYNTI2_NENVD (NENVKNEES*2)" << endl;

  /* Some constants cannot change because of implementation. */
  ost << "#define RELEASESTAGE " << "2" << endl;
  ost << "#define LOOPSTAGE " << "1" << endl;

  /* Some remain hard-coded until necessary to modify.*/
  ost << "#define DELAYSAMPLES 0x10000" << endl;
  ost << "#define SYNTI2_MAX_SONGBYTES 30000" << endl;
  ost << "#define SYNTI2_MAX_SONGEVENTS 15000" << endl;
  ost << cap_epilogue;
}

void
synti2::Capacities::writeParamH(std::ostream &ost) const {
  Features f(kval.asString("features"));
}
